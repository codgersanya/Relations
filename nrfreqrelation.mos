#*************************************#
#                                     #
#           nrfreqrel.mos             #
#                                     #
#*************************************#

#This script adds NRFreqRelations to the node -based on existing NRFrequencys.
#ENDC-NR mobility specific settings are also included at the end of the script.
#It creates UeMCNrFreqRelProfile and sets references for NRFreqRelation -based on the latest CR.
#It adds McpcPSCellProfile and sets references for NRFreqRelation -based on the latest CR.
#NR SA mobility is not yet covered.

#*************************************#
#        initial variables            #
#*************************************#

lt all
unset all
!rm -r $tempdir/*.*

#*************************************#
#             Printouts               #
#*************************************#connModeAllowedPCell

!echo '*****************************************************************' >> $tempdir/temp_error0.txt
!echo '** ERROR: There is no NRNetwork configured!**********************' >> $tempdir/temp_error0.txt
!echo '** Please check whether the node is configured for 5G! **********' >> $tempdir/temp_error0.txt
!echo '*****************************************************************' >> $tempdir/temp_error0.txt

!echo '**********************************************************************' >> $tempdir/temp_error1.txt
!echo '** ERROR: There are no NRCellCUs!********************************** **' >> $tempdir/temp_error1.txt
!echo '** Enable NRCellDUs first and NRCellCUs wil be autocreated, or *******' >> $tempdir/temp_error1.txt
!echo '** or define them manually! ******************************************' >> $tempdir/temp_error1.txt
!echo '**********************************************************************' >> $tempdir/temp_error1.txt

!echo '*************************************************************************************************' >> $tempdir/temp_error2.txt
!echo '** ERROR: Some or all of the NRFrequencies are missing! *****************************************' >> $tempdir/temp_error2.txt
!echo '** NRFrequency is autocreated by the autocreation of NRCellCU and ExternalNRCellCU.! ************' >> $tempdir/temp_error2.txt
!echo '** Xn (TermPointToGNodeB) must be ENABLED for setting up NRCellRelations to ExternalNRCellCUs. **' >> $tempdir/temp_error2.txt
!echo '** NRCellDUs must be enabled before running this script. ****************************************' >> $tempdir/temp_error2.txt
!echo '** Script execution is stopped ******************************************************************' >> $tempdir/temp_error2.txt
!echo '*************************************************************************************************' >> $tempdir/temp_error2.txt

!echo '*****************************************************************' >> $tempdir/temp_success.txt
!echo '** SUCCESS: The following NRFreqRelations have been added: ******' >> $tempdir/temp_success.txt
!echo '*****************************************************************' >> $tempdir/temp_success.txt

!echo '****************************************************************' >> $tempdir/temp_nonew.txt
!echo '** NO CHANGE: All NRFreqRelations are added already. ***********' >> $tempdir/temp_nonew.txt
!echo '** The script has finished with the check! *********************' >> $tempdir/temp_nonew.txt
!echo '****************************************************************' >> $tempdir/temp_nonew.txt

#*************************************#
#       Function definitions          #
#*************************************#

func mocheck
	mr NRNETWORKGROUP
	ma NRNETWORKGROUP ^NRNetwork=
	if $nr_of_mos = 0
		!cat  $tempdir/temp_error0.txt
		return
	fi
	for $mo in NRNETWORKGROUP
		$rdnnrnetwork = rdn($mo)
	done
	
	pr ^NRCellCU=
	if $nr_of_mos = 0
		!cat  $tempdir/temp_error1.txt
		return
	fi
	
	mr cellgroup
	ma cellgroup ^NRCellCU=
		for $mo in cellgroup
			$i = $i + 1
			$rdnnrcell[$i] = rdn($mo)
			$ldnnrcell[$i] = ldn($mo)
			$moidnrcell[$i] = $ldnnrcell[$i] -s .*=
		done
	
	pr ^NRFrequency=
	if $nr_of_mos = 0
		!cat  $tempdir/temp_error2.txt
		return
	fi
	
	mr nrfrequencygroup
	ma nrfrequencygroup ^NRFrequency=
		for $mo in nrfrequencygroup
			$j = $j + 1
			$rdnnrfrequency[$j] = rdn($mo)
			$ldnnrfrequency[$j] = ldn($mo)
			$moidnrfrequency[$j] = $rdnnrfrequency[$j] -s .*=
			$moidnrfrequency[$j] = $moidnrfrequency[$j] -s -.*
			
	done
endfunc

func nonew
	$linecontent = testfile($tempdir/result.txt)
	if $nr_of_lines  = 0
		!cat $tempdir/temp_nonew.txt
	else
		!cat $tempdir/temp_success.txt
		!cat $tempdir/result.txt
	fi
	$linecontent = testfile($tempdir/nossb.txt)
	if $nr_of_lines  > 0
		!cat $tempdir/nossb.txt
	fi
endfunc

func result
	pr $ldnnrcell[$m],NRFreqRelation=$moidnrfrequency[$k]
	if $nr_of_mos != 0
		!echo $ldnnrcell[$m],NRFreqRelation=$moidnrfrequency[$k] >> $tempdir/result.txt
	fi
endfunc

func relcreate
	get $rdnnrcell[$m] threshServingLowQ > $threshServingLowQ[$m]
	if $threshServingLowQ[$m] >= 0
		crn $ldnnrcell[$m],NRFreqRelation=$moidnrfrequency[$k]
		nRFrequencyRef $ldnnrfrequency[$k]
		threshXLowQ 0
		threshXHighQ 0
		end
	else
		crn $ldnnrcell[$m],NRFreqRelation=$moidnrfrequency[$k]
		nRFrequencyRef $ldnnrfrequency[$k]
		end
	fi
	result
endfunc

func add_nrfrequency_to_cell
	for $k = 1 to $j
		print $rdnnrcell[$m],NRFreqRelation= nRFrequencyRef $rdnnrnetwork,$rdnnrfrequency[$k]
		get $rdnnrcell[$m],NRFreqRelation= nRFrequencyRef $rdnnrnetwork,$rdnnrfrequency[$k]
		if $nr_of_mos = 0
			relcreate
		fi
	done
endfunc

func newnrfreqcrerror
	pr $nRFrequencyRef[$m]
	if $nr_of_mos = 0
		!cat  $tempdir/temp_error2.txt
		break
		$return = 1
	fi
endfunc

func newnrfreqcr
	if $nr_of_mos = 0
		crn $nRFrequencyRef[$m]
	fi
endfunc

func nrfreki
	get $moidnrcell[$m] ssbFrequency$ > $ssbFrequency[$m]
	if ssbFrequency[$m] = 0
		get $moidnrcell[$m] ssbFrequencyAutoSelected > $ssbFrequency[$m]
	fi
	get $moidnrcell[$m] ssbSubCarrierSpacing 				> $ssbSubCarrierSpacing[$m]
	get $moidnrcell[$m] ssbPeriodicity       				> $ssbPeriodicity[$m]
	get $moidnrcell[$m] ssbOffset$           				> $ssbOffset[$m]
	if $ssbOffset[$m] = 0		
		get $moidnrcell[$m] ssbOffsetAutoSelected   		> $ssbOffset[$m]
	fi		
	get $moidnrcell[$m] ssbDuration$          				> $ssbDuration[$m]
	if $ssbDuration[$m] = 0
		get $moidnrcell[$m] ssbDurationAutoSelected         > $ssbDuration[$m]
	fi
	
	if $ssbFrequency[$m] = 0 || $ssbSubCarrierSpacing[$m] = 0 || $ssbPeriodicity[$m] = 0 || $ssbOffset[$m] = ^$ || $ssbDuration[$m] = ^$
		!echo '**********************************************************************************************'  >> $tempdir/nossb.txt
		!echo 'The SSB-configuration of $moidnrcell[$m] is incomplete and the nRFrequencyRef is also missing!'	>> $tempdir/nossb.txt
		!echo 'NRFreqRelation to $moidnrcell[$m] couldn not be verified!										>> $tempdir/nossb.txt
		!echo 'Define the missing ssb for $moidnrcell[$m] and run this script again!' 							>> $tempdir/nossb.txt
		!echo '**********************************************************************************************'  >> $tempdir/nossb.txt
	else
		$nRFrequencyRef[$m] = NRNetwork=$rdnnrnetwork,NRFrequency=$ssbFrequency[$m]-$ssbSubCarrierSpacing[$m]-$ssbPeriodicity[$m]-$ssbOffset[$m]-$ssbDuration[$m]
		pr $nRFrequencyRef[$m]			
		newnrfreqcr
		newnrfreqcrerror
	fi
endfunc

func nrfrekiref
	get $moidnrcell[$m] nRFrequencyRef > $nRFrequencyRef[$m]
	if $nRFrequencyRef[$m] ~ ^$
		nrfreki
	fi
endfunc

#*************************************#
#       Main program starts           #
#*************************************#

mocheck	
for $m = 1 to $i
	nrfrekiref
	if $return = 1
		break
	fi
	add_nrfrequency_to_cell
done
if $return = 1
	return
fi

#*****************************************************#
#   ENDC-NR mobility specific settings starts here    #
#*****************************************************#

mr GNBCUCPFUNCTIONGROUP
ma GNBCUCPFUNCTIONGROUP ^GNBCUCPFunction=
for $mo in GNBCUCPFUNCTIONGROUP
	$gnbcucpfunctionldn = ldn($mo)
done

#UeMC
mr UEMCGROUP
ma UEMCGROUP ^UeMC=
for $mo in UEMCGROUP
	$uemcgroupldn = ldn($mo)
done
	

#crn $uemcgroupldn,UeMCNrFreqRelProfile=1 #autocreated
#connModeAllowedPCell false
#connModePrioPCell 7
#userLabel 
#end

#cr $uemcgroupldn,UeMCNrFreqRelProfile=1,UeMCNrFreqRelProfileUeCfg=Base #autocreated
#connModeAllowedPSCell false #default

$y = 0
for $x = 1 to 6
	pr $uemcgroupldn,UeMCNrFreqRelProfile=$x
	if $nr_of_mos = 0
		$y = 1
		crn $uemcgroupldn,UeMCNrFreqRelProfile=$x
		ueConfGroupType 0
		end
		#crn $uemcgroupldn,UeMCNrFreqRelProfile=$x,UeMCNrFreqRelProfileUeCfg=Base #autocreated
		#connModeAllowedPCell false
		#connModeAllowedPSCell false
		#connModePrioPCell 7
		#connModePrioPSCell 2
		#prefUeGroupList 
		#ueConfGroupList 
		#ueGroupList 
		#end
	fi
done
if $y = 1
	wait 1
	lt all
fi

#NRFreqRelation=156510 UeMCNrFreqRelProfile=5 #n281 connModePrioPSCell 2
#NRFreqRelation=374190 UeMCNrFreqRelProfile=4 #n031 connModePrioPSCell 4
#NRFreqRelation=431810 UeMCNrFreqRelProfile=3 #n011 connModePrioPSCell 1
#NRFreqRelation=636960 UeMCNrFreqRelProfile=1 #n781 connModePrioPSCell 7
#NRFreqRelation=646272 UeMCNrFreqRelProfile=2 #n782 connModePrioPSCell 7
#NRFreqRelation=529490 UeMCNrFreqRelProfile=6 #n071 connModePrioPSCell 5

mr NRFreqRelation 
ma NRFreqRelation NRFreqRelation=
for $mo in NRFreqRelation
	$nrfreqrelation = rdn($mo)
	if $nrfreqrelation = NRFreqRelation=156510
		set $nrfreqrelation ueMCNrFreqRelProfileRef $uemcgroupldn,UeMCNrFreqRelProfile=5
	else if $nrfreqrelation = NRFreqRelation=374190
		set $nrfreqrelation ueMCNrFreqRelProfileRef $uemcgroupldn,UeMCNrFreqRelProfile=4
	else if $nrfreqrelation = NRFreqRelation=431810
		set $nrfreqrelation ueMCNrFreqRelProfileRef $uemcgroupldn,UeMCNrFreqRelProfile=3	
	else if $nrfreqrelation = NRFreqRelation=636960
		set $nrfreqrelation ueMCNrFreqRelProfileRef $uemcgroupldn,UeMCNrFreqRelProfile=1
	else if $nrfreqrelation = NRFreqRelation=646272
		set $nrfreqrelation ueMCNrFreqRelProfileRef $uemcgroupldn,UeMCNrFreqRelProfile=2
	else if $nrfreqrelation = NRFreqRelation=529490
		set $nrfreqrelation ueMCNrFreqRelProfileRef $uemcgroupldn,UeMCNrFreqRelProfile=6
	fi
done

set $uemcgroupldn,UeMCNrFreqRelProfile=1,UeMCNrFreqRelProfileUeCfg=Base connModePrioPSCell 7
set $uemcgroupldn,UeMCNrFreqRelProfile=2,UeMCNrFreqRelProfileUeCfg=Base connModePrioPSCell 7
set $uemcgroupldn,UeMCNrFreqRelProfile=3,UeMCNrFreqRelProfileUeCfg=Base connModePrioPSCell 1
set $uemcgroupldn,UeMCNrFreqRelProfile=4,UeMCNrFreqRelProfileUeCfg=Base connModePrioPSCell 4
set $uemcgroupldn,UeMCNrFreqRelProfile=5,UeMCNrFreqRelProfileUeCfg=Base connModePrioPSCell 2
set $uemcgroupldn,UeMCNrFreqRelProfile=6,UeMCNrFreqRelProfileUeCfg=Base connModePrioPSCell 5
set UeMCNrFreqRelProfileUeCfg connModeAllowedPSCell true

set NRCellCU ueMCCellProfileRef $uemcgroupldn,UeMCCellProfile=1

#NR Traffic Steering

mr TRSTGROUP
ma TRSTGROUP TrafficSteering=
for $mo in TRSTGROUP
	$trstldn = ldn($mo)
done

pr $trstldn,TrStPSCellProfile=1
if $nr_of_mos = 0
	crn $trstldn,TrStPSCellProfile=1
	userLabel PSCCtoHighPrio 1
	end	
	#crn $trstldn,TrStPSCellProfile=1,TrStPSCellProfileUeCfg=Base #autocreated
	#hiPrioDetInactiveTime 500
	#hiPrioDetMeasurementTime 120000
	#hiPrioDetStartTime 10
	#rsrpCandidateA5 hysteresis=20,threshold2=-114,timeToTrigger=640
	#userLabel 
	#end
	wait 1
	lt all
fi

set NRCellCU trStPSCellProfileRef $trstldn,TrStPSCellProfile=1
set $trstldn,TrStPSCellProfile=1,TrStPSCellProfileUeCfg=Base rsrpCandidateA5 hysteresis=30, threshold2=-95, timeToTrigger=640
set nrcellcu hiPrioDetEnabled true

#NR Mobility at Poor Coverage

mr MCPCGROUP
ma MCPCGROUP Mcpc=
for $mo in MCPCGROUP
	$mcpcgroup = ldn($mo)
done

pr $mcpcgroup,McpcPSCellProfile=1
if $nr_of_mos = 0
	cr $mcpcgroup,McpcPSCellProfile=1
	wait 1
	lt all
fi

#crn $gnbcucpfunctionldn,$mcpcgroup,McpcPSCellNrFreqRelProfile=Default #autocreated
#userLabel 
#end

#crn $gnbcucpfunctionldn,$mcpcgroup,McpcPSCellNrFreqRelProfile=Default,McpcPSCellNrFreqRelProfileUeCfg=Base #autocreated
#inhibitMeasForCellCandidate false
#rsrpCandidateA5Offsets threshold1Offset=0,threshold2Offset=0
#userLabel 
#end

set NRFreqRelation mcpcPSCellNrFreqRelProfileRef $mcpcgroup,McpcPSCellNrFreqRelProfile=Default
set NRCellCU mcpcPSCellProfileRef $mcpcgroup,McpcPSCellProfile=1
set nrcellcu mcpcPSCellEnabled true
set McpcPSCellNrFreqRelProfileUeCfg inhibitMeasForCellCandidate false
set McpcPSCellNrFreqRelProfileUeCfg rsrpCandidateA5Offsets threshold1Offset=0, threshold2Offset=0 
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base lowHighFreqPrioClassification 7
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base mcpcQuantityList 0
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base rsrpCriticalEnabled true
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base rsrpSearchTimeRestriction 12000
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base rsrpSearchZone hysteresis=30, threshold=-95, timeToTrigger=160, timeToTriggerA1=-1
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base rsrpCandidateA5 hysteresis=30, threshold1=-98, threshold2=-96, timeToTrigger=320
set $mcpcgroup,McpcPSCellProfile=1,McpcPSCellProfileUeCfg=Base rsrpCritical hysteresis=10, threshold=-124, timeToTrigger=160

#Measurement Gap-Aware NR Scheduling
#measGapPattern 0  --> 1
#15(INACTIVITYTIMER_100MS) --> 7(INACTIVITYTIMER_8MS)
#39(ONDURATIONTIMER_10MS) --> 38(ONDURATIONTIMER_8MS)


func measGapPattern
	for $mo in eutrancellfdd
	get $mo administrativestate > $admsteutrancell
	if $admsteutrancell ~ 1
		$i = $i + 1
		$rdneutrancellfdd[$i] = rdn($mo)
		bl $mo
	fi
	done
	##Default values:
	set EUtranCellFDD measGapPattern 1
	set EUtranCellFDD measGapPattEndc 1
	for $m = 1 to $i
		deb $rdneutrancellfdd[$m]
	done
endfunc

$i = 0
mr eutrancellfdd
ma eutrancellfdd ^EUtranCellFDD=
if $nr_of_mos > 0
	measGapPattern
fi

#$m = 0
#mr NRCellDU
#ma NRCellDU ^NRCellDU=
#for $mo in NRCellDU
#	get $mo administrativestate > $admstnrcell
#	if $admstnrcell ~ 1
#		$m = $m + 1
#		$rdnNRCellDU[$m] = rdn($mo)
#		bl $mo
#	fi
#done	
#set NRCellDU drxInactivityTimer 7
#set NRCellDU drxOnDurationTimer 38
#for $m = 1 to $m
#	deb $rdnNRCellDU[$m]
#done

#Intra Freq NR Mobility

set . intraFreqMCCellProfileUsage 1

mr GNBCUCPFunction
ma GNBCUCPFunction ^GNBCUCPFunction=
for $mo in GNBCUCPFunction
	$gnbcucpfunctionldn = rdn($mo)
	$gnbcucpfunctionldn = $gnbcucpfunctionldn -s .*=
done

pr IntraFreqMCCellProfile=1
if $nr_of_mos = 0
	cr GNBCUCPFunction=$gnbcucpfunctionldn,IntraFreqMC=1,IntraFreqMCCellProfile=1
	wait 1
	lt all
fi
set IntraFreqMC=1,IntraFreqMCCellProfile=1 rsrpSCellCoverage threshold=-138,hysteresis=40
set IntraFreqMC=1,IntraFreqMCCellProfile=1,IntraFreqMCCellProfileUeCfg=Base rsrpBetterSpCell timeToTrigger=320,offset=20
set IntraFreqMC=1,IntraFreqMCCellProfile=1,IntraFreqMCCellProfileUeCfg=Base betterSpCellTriggerQuantity 0
set IntraFreqMC=1,IntraFreqMCCellProfile=1,IntraFreqMCCellProfileUeCfg=Base endcActionEvalFail 0
set IntraFreqMC=1,IntraFreqMCCellProfile=1,IntraFreqMCCellProfileUeCfg=Base rsrpBetterSpCell hysteresis=10,offset=30,timeToTrigger=640
set NRCellCU intraFreqMCCellProfileRef GNBCUCPFunction=$gnbcucpfunctionldn,IntraFreqMC=1,IntraFreqMCCellProfile=1

pr IntraFreqMCFreqRelProfile=1
if $nr_of_mos = 0
	cr GNBCUCPFunction=$gnbcucpfunctionldn,IntraFreqMC=1,IntraFreqMCFreqRelProfile=1
	lt all
	wait 1
fi
set IntraFreqMC=1,IntraFreqMCFreqRelProfile=1,IntraFreqMCFreqRelProfileUeCfg=Base rsrpSCellCoverageThrOffset 0
set IntraFreqMC=1,IntraFreqMCFreqRelProfile=1,IntraFreqMCFreqRelProfileUeCfg=Base rsrqSCellCoverageThrOffset 0
set NRCellCU.*,NRFreqRelation intraFreqMCFreqRelProfileRef GNBCUCPFunction=$gnbcucpfunctionldn,IntraFreqMC=1,IntraFreqMCFreqRelProfile=1

#*****************************************************#
#   ENDC-NR mobility specific settings ends here      #
#*****************************************************#

nonew